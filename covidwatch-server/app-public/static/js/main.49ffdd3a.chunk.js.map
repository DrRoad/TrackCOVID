{"version":3,"sources":["translations/en.js","translations/es.js","languages.js","api.js","Checkpoints.js","theme.js","Exposures.js","Settings.js","StatusAlert.js","i18n.js","App.js","index.js","../../covidwatch-js/config.js","../../covidwatch-js/index.js","logo.svg"],"names":["module","exports","id","name","serverBaseUrl","defaultServerBaseUrl","getUseConfirmed","a","localStorage","window","useConfirmedString","getItem","Promise","resolve","JSON","parse","setUseConfirmed","newVal","setItem","stringify","covidWatch","CovidWatch","safetyPeriod","estimatedDiagnosisDelay","getCheckpoints","checkpointsString","setCheckpoints","checkpointsArr","hostCheckpoint","joinCheckpoint","getExposureStatus","reportPositive","initialState","mode","checkpointKey","checkpointTime","legacyMode","Checkpoints","state","URLSearchParams","location","search","get","length","checkpointKeyLength","API","then","checkpointObj","setState","history","replaceState","pathname","e","console","error","this","key","time","alert","reset","data","urlSplit","split","refs","checkpointQR","openImageDialog","content","qrValue","href","Grid","container","direction","justify","alignItems","Typography","style","marginTop","marginBottom","t","Button","onClick","becomeHost","bind","variant","color","aria-label","value","size","backgroundColor","padding","endHost","Date","toString","ref","delay","onError","handleScanError","onScan","handleScan","width","facingMode","React","Component","theme","createMuiTheme","palette","type","primary","main","secondary","exposureStatus","loaded","showReportConfirmation","confirmcode","undefined","Exposures","confirmcodeLength","reportConfirmation","props","status","statusLoaded","statusMessageLoading","statusMessageNegative","statusMessagePositive","riskLevelLoading","riskLevelNegative","riskLevelPositive","statusMessage","riskLevel","riskLevelColor","showReportPrompt","scanConfirmcode","Dialog","open","disableBackdropClick","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","useConfirmed","Settings","List","component","ListItem","button","toggleUseConfirmed","ListItemIcon","ListItemText","StatusAlert","extraText","onExposuresTab","Alert","severity","resources","en","es","i18n","use","LanguageDetector","initReactI18next","init","fallbackLng","keySeparator","interpolation","escapeValue","detection","order","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","excludeCacheFor","cookieMinutes","cookieDomain","htmlTag","document","documentElement","checkWhitelist","ListItemLink","App","currentTab","isDrawerOpen","currentLanguage","language","checkConfirmcode","updateStatus","setInterval","event","changeLanguage","target","CurrentPage","CheckpointsPage","ExposuresPage","SettingsPage","AppBar","position","Container","maxWidth","flexGrow","Toolbar","IconButton","edge","openDrawer","fallback","textAlign","verticalAlign","fontSize","lineHeight","src","logo","alt","height","marginRight","filter","opacity","FormControl","Select","labelId","onChange","onSelectLanguage","supportedLanguages","map","MenuItem","BottomNavigation","bottom","onChangeTab","showLabels","BottomNavigationAction","label","icon","SwipeableDrawer","onClose","closeDrawer","ReactDOM","render","ThemeProvider","CssBaseline","querySelector","config","serverRequest","method","url","body","fetch","headers","Accept","response","responseJSON","json","Error","addCheckpoint","checkpoints","lastCheckpoint","now","push","getCheckpointStatus","riskLevelProp","newCheckpointKey","checkpoint","recentCheckpoints","all","statuses","some","checkpointKeys","keys"],"mappings":"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","file":"static/js/main.49ffdd3a.chunk.js","sourcesContent":["module.exports = {\n  'translation': {\n    'aboutButton': 'About',\n    'checkpointsTab': 'Checkpoints',\n    'statusTab': 'Status',\n    'settingsTab': 'Settings',\n    'welcomeMessage': 'Welcome to TrackCOVID. To participate in the effort to track the spread of the SARS-COV-2 virus, please host or join a checkpoint whenever you interact with others in a way that could transmit the virus.',\n    'hostCheckpointButton': 'Host a Checkpoint',\n    'joinCheckpointButton': 'Join a Checkpoint',\n    'hostingCheckpointMessage': 'You are now hosting a checkpoint. Others may join using the QR code below.',\n    'endCheckpointButton': 'End checkpoint',\n    'checkpointCreatedMessage': 'Checkpoint created',\n    'noCameraPermissionMessage': \"This app does not have permission to access your device's camera. Instead, you may take a picture of the QR code.\",\n    'takePictureButton': 'Take a picture',\n    'backButton': 'Back',\n    'joinSuccessfulMessage': 'You have joined the checkpoint successfully.',\n    'scanErrorMessage': 'The QR code could not be read. Please try again.',\n    'statusLoadingMessage': 'Loading your status...',\n    'statusNegativeMessage': 'No transmission paths from infected individuals to you have been discovered at this time. However, everyone is at risk and individuals should follow the directives of the CDC as well as local, state, and federal governments.',\n    'statusPositiveMessage': 'A possible transmission path from an infected individual to you has been discovered. You should take precautionary measures to protect yourself and others, according to the directives of the CDC  as well as local, state, and federal governments.',\n    'loadingMessage': 'Loading...',\n    'standardRiskLevelMessage': 'standard',\n    'elevatedRiskLevelMessage': 'elevated',\n    'yourRiskLevelMessage': 'Your risk level',\n    'aboutReportMessage': 'If you or someone you have been in close contact with have received a positive test, you may report it using the button below. This will warn those who may have been exposed of their increased risk. You will remain anonymous.',\n    'reportButton': 'Anonymous Report',\n    'aboutConfirmationCodeMessage': 'Do you have a confirmation code to scan? Scanning a confirmation code will help those that may have been exposed, by letting them know that this is a legitimate risk.',\n    'scanConfirmationCodeButton': 'Scan confirmation code',\n    'scanWithoutConfirmationCodeButton': \"I don't have a code\",\n    'reportConfirmationMessage': 'This will notify those that may have been exposed of their increased risk. You will remain anonymous. This cannot be undone.',\n    'reportCompletedMessage': 'Your positive status was reported anonymously. Those at risk will be notified. Thank you.',\n    'cancelReportButton': 'Never mind',\n    'confirmReportButton': 'Report now',\n    'aboutUseConfirmedDiagnoses': 'Selecting \"Use only confirmed diagnoses\" will ignore possible transmission paths from unconfirmed reports.',\n    'useConfirmedDiagnosesButton': 'Use only confirmed diagnoses',\n    'elevatedRiskAlertMessage': 'Your risk level is elevated.',\n    'seeStatusTabMessage': 'See the status tab.'\n  }\n}\n","module.exports = {\n  'translation': {\n    'aboutButton': 'Sobre',\n    'checkpointsTab': 'Punto de Chequeo',\n    'statusTab': 'Estado',\n    'settingsTab': 'Ajustes',\n    'welcomeMessage': 'Bienvenido a TrackCOVID. Para participar en el esfuerzo de trazar la diseminación del virus SARS-COV-2, por favor hospede o únase a una Estación de Chequeo en cualquier lugar que tome contacto con otros de un modo que pueda transmitir virus.',\n    'hostCheckpointButton': 'Hospede un Punto de Chequeo',\n    'joinCheckpointButton': 'Únase a un Punto de Chequeo',\n    'hostingCheckpointMessage': 'Usted está ahora alojando un Punto de Chequeo. Otras personas pueden unirse usando el código QR de abajo.',\n    'endCheckpointButton': 'Finalizar Punto de Chequeo',\n    'checkpointCreatedMessage': 'Punto de Chequeo creado',\n    'noCameraPermissionMessage': 'Esta app no tiene permiso para acceder a la cámara de su teléfono. En su lugar , Usted puede tomar una fotografía del código QR.',\n    'takePictureButton': 'Tome una Fotografía',\n    'backButton': 'Volver,',\n    'joinSuccessfulMessage': 'Se ha unido con éxito a un Punto de Chequeo.',\n    'scanErrorMessage': 'El códifo QR no pudo ser creado, por favor intente nuevamente.',\n    'statusLoadingMessage': 'Cargando su estado...',\n    'statusNegativeMessage': 'No se encontrado ninguna vía de transmisión hacia Usted de individuos infectados hasta este momento. Sin embargo, todos estamos en riesgo y debemos seguir las guías del CDC ó de las autoridades Sanitarias locales, Provinciales - Estatales y Nacionales.',\n    'statusPositiveMessage': 'Se ha encontrado una posible vía de trasmisión desde un individuo infectado hacia Ud. Debe tomar las medidas de precaución necesarias para protegerse y proteger a otros, de acuerdo a las directivas del CDC o de las autoridades Sanitarias locales, Provinciales o Estatales y Nacionales. Comuníquese telefónicamente.',\n    'loadingMessage': 'Cargando...',\n    'standardRiskLevelMessage': 'Estandard',\n    'elevatedRiskLevelMessage': 'Elevado',\n    'yourRiskLevelMessage': 'Su Nivel de Riesgo',\n    'aboutReportMessage': 'Si usted ó alguien próximo ha estado en contacto estrecho con quien a recibido un test positivo para Covid 19, Ud. puede reportarlo usando el botón debajo. Esto podrá dar un aviso a quienes puedan haber estado expuestos. Usted no será identificado en absoluto.',\n    'reportButton': 'Reporte anónimo',\n    'aboutConfirmationCodeMessage': '¿Tiene Usted un código de confirmación ó informe para escanear? El escaneado de un código de confirmación ayudará a aquellos que puedan haber sido expuestos al permitirles saber que este es un riesgo legítimo.',\n    'scanConfirmationCodeButton': 'Scanee el código de confirmación',\n    'scanWithoutConfirmationCodeButton': 'No tengo un código',\n    'reportConfirmationMessage': 'Esto notificará a aquellos que puedan haber sido expuestos a su riesgo incrementado. Usted permanecerá en el anonimato. esta acción no se puede revertir.',\n    'reportCompletedMessage': 'Su estado Positivo fue informado anónimamente. Aquellos en riesgo han sido informados. Muchas Gracias.',\n    'cancelReportButton': 'No lo olvide',\n    'confirmReportButton': 'Reportar ahora',\n    'aboutUseConfirmedDiagnoses': 'Seleccionando \"Usar sólo en diagnósticos confirmados\" se ignorarán vías posibles de transmisión de casos no confirmados.',\n    'useConfirmedDiagnosesButton': 'Usar solo diagnósticos confirmados',\n    'elevatedRiskAlertMessage': 'Su nivel de Riesgo es Elevado.',\n    'seeStatusTabMessage': 'Mire la Barra de Estado.'\n  }\n}\n","module.exports = [\n  { id: 'en', name: 'English' },\n  { id: 'es', name: 'Spanish' }\n]\n","import CovidWatch from 'covidwatch-js'\nimport {\n  safetyPeriod,\n  estimatedDiagnosisDelay,\n  serverBaseUrl as defaultServerBaseUrl\n} from 'covidwatch-js/config'\n\nconst checkpointsDBKey = 'CHECKPOINTS'\nconst useConfirmedDBKey = 'USECONFIRMED'\nconst serverBaseUrl = (process.env['REACT_APP_ENV'] === 'development')\n  ? 'http://localhost:8000/api/checkpoints'\n  : defaultServerBaseUrl\n\nfunction getCheckpoints () {\n  const localStorage = window.localStorage\n  const checkpointsString = localStorage.getItem(checkpointsDBKey) || '[]'\n  return Promise.resolve(JSON.parse(checkpointsString))\n}\n\nfunction setCheckpoints (checkpointsArr) {\n  const localStorage = window.localStorage\n  return Promise.resolve(localStorage.setItem(checkpointsDBKey, JSON.stringify(checkpointsArr)))\n}\n\nasync function getUseConfirmed () {\n  const localStorage = window.localStorage\n  const useConfirmedString = localStorage.getItem(useConfirmedDBKey) || 'false'\n  return Promise.resolve(JSON.parse(useConfirmedString))\n}\n\nasync function setUseConfirmed (newVal) {\n  const localStorage = window.localStorage\n  return Promise.resolve(localStorage.setItem(useConfirmedDBKey, JSON.stringify(newVal)))\n}\n\nconst covidWatch = CovidWatch({\n  serverBaseUrl,\n  safetyPeriod,\n  estimatedDiagnosisDelay,\n  getCheckpoints,\n  setCheckpoints,\n  getUseConfirmed,\n  setUseConfirmed\n})\n\nconst {\n  hostCheckpoint,\n  joinCheckpoint,\n  getExposureStatus,\n  reportPositive\n} = covidWatch\n\nexport default {\n  hostCheckpoint,\n  joinCheckpoint,\n  getExposureStatus,\n  reportPositive,\n  getUseConfirmed,\n  setUseConfirmed\n}\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport AddIcon from '@material-ui/icons/Add'\nimport HomeIcon from '@material-ui/icons/Home'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport StopIcon from '@material-ui/icons/Stop'\nimport QRCode from 'qrcode.react'\nimport QRReader from 'react-qr-reader'\nimport { Translation } from 'react-i18next'\nimport API from './api'\nimport {\n  checkpointKeyLength\n} from 'covidwatch-js/config'\n\nconst initialState = {\n  mode: 'home',\n  checkpointKey: null,\n  checkpointTime: null,\n  legacyMode: false\n}\n\nclass Checkpoints extends React.Component {\n  constructor () {\n    super()\n    this.state = initialState\n  }\n\n  componentDidMount () {\n    const urlParams = new URLSearchParams(window.location.search)\n    const checkpointKey = urlParams.get('checkpoint')\n    if (checkpointKey) {\n      if (checkpointKey.length === checkpointKeyLength) {\n        try {\n          API.joinCheckpoint(checkpointKey).then(checkpointObj => {\n            this.setState({ mode: 'scan-success' })\n            window.history.replaceState(null, null, window.location.pathname)\n          })\n        } catch (e) {\n          console.error(e)\n          this.setState({ mode: 'scan-error' })\n          window.history.replaceState(null, null, window.location.pathname)\n        }\n      } else {\n        this.setState({ mode: 'scan-error' })\n        window.history.replaceState(null, null, window.location.pathname)\n      }\n    }\n  }\n\n  async reset () {\n    this.setState(initialState)\n  }\n\n  async becomeHost () {\n    try {\n      const { key, time } = await API.hostCheckpoint()\n      this.setState({\n        mode: 'host',\n        checkpointKey: key,\n        checkpointTime: time\n      })\n    } catch (e) {\n      console.error(e)\n      window.alert('There was an unexpected error. Please leave feedback so the developer can fix this.')\n    }\n  }\n\n  async endHost () {\n    // TODO confirmation\n    this.reset()\n  }\n\n  async joinCheckpoint () {\n    this.setState({\n      mode: 'join'\n    })\n  }\n\n  async handleScan (data) {\n    if (data) {\n      if (data.length === checkpointKeyLength) {\n        try {\n          await API.joinCheckpoint(data)\n          this.setState({ mode: 'scan-success' })\n        } catch (e) {\n          console.error(e)\n          this.setState({ mode: 'scan-error' })\n        }\n      } else {\n        // QR code may be a url\n        const urlSplit = data.split('?checkpoint=')\n        if ((urlSplit.length === 2) && (urlSplit[1].length === checkpointKeyLength)) {\n          await API.joinCheckpoint(urlSplit[1])\n          this.setState({ mode: 'scan-success' })\n        } else {\n          this.setState({ mode: 'scan-error' })\n        }\n      }\n    }\n  }\n\n  handleScanError () {\n    this.setState({ legacyMode: true })\n  }\n\n  openImageDialog () {\n    this.refs.checkpointQR.openImageDialog()\n  }\n\n  render () {\n    const { mode, checkpointKey, checkpointTime, legacyMode } = this.state\n    const qrValue = `${window.location.href}?checkpoint=${checkpointKey}`\n    let content\n    if (mode === 'home') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n            <Translation>{t => t('welcomeMessage')}</Translation>\n          </Typography>\n          <Button onClick={this.becomeHost.bind(this)} variant='contained' color='secondary' aria-label='add' style={{ marginTop: 50 }}>\n            <HomeIcon />\n            <Translation>{t => t('hostCheckpointButton')}</Translation>\n          </Button>\n          <Button onClick={this.joinCheckpoint.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 50 }}>\n            <AddIcon />\n            <Translation>{t => t('joinCheckpointButton')}</Translation>\n          </Button>\n        </Grid>\n      )\n    } else if (mode === 'host') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n            <Translation>{t => t('hostingCheckpointMessage')}</Translation>\n          </Typography>\n          <QRCode value={qrValue} size={200} style={{ backgroundColor: '#fff', padding: 20 }} />\n          <Button onClick={this.endHost.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <StopIcon />\n            <Translation>{t => t('endCheckpointButton')}</Translation>\n          </Button>\n          <Typography style={{ marginTop: 25 }}>\n            <Translation>{t => t('checkpointCreatedMessage')}</Translation> {new Date(checkpointTime).toString()}\n          </Typography>\n        </Grid>\n      )\n    } else if (mode === 'join') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <QRReader\n            ref='checkpointQR'\n            delay={300}\n            onError={this.handleScanError.bind(this)}\n            onScan={this.handleScan.bind(this)}\n            style={{ width: legacyMode ? 0 : '100%' }}\n            facingMode='environment'\n            legacyMode={legacyMode}\n          />\n          { legacyMode && (\n            <Typography style={{ marginTop: 25 }}>\n              <Translation>{t => t('noCameraPermissionMessage')}</Translation>\n            </Typography>\n          ) }\n          <Button onClick={this.openImageDialog.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <Translation>{t => t('takePictureButton')}</Translation>\n          </Button>\n          <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <ArrowBackIcon />\n            <Translation>{t => t('backButton')}</Translation>\n          </Button>\n        </Grid>\n      )\n    } else if (mode === 'scan-success') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n            <Translation>{t => t('joinSuccessfulMessage')}</Translation>\n          </Typography>\n          <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <ArrowBackIcon />\n            <Translation>{t => t('backButton')}</Translation>\n          </Button>\n        </Grid>\n      )\n    } else if (mode === 'scan-error') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n            <Translation>{t => t('scanErrorMessage')}</Translation>\n          </Typography>\n          <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <ArrowBackIcon />\n            <Translation>{t => t('backButton')}</Translation>\n          </Button>\n        </Grid>\n      )\n    }\n    return content\n  }\n}\n\nexport default Checkpoints\n","import { createMuiTheme } from '@material-ui/core/styles'\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#ffef62'\n    },\n    secondary: {\n      main: '#fbc02d'\n    }\n  }\n})\n\nexport default theme\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport QRReader from 'react-qr-reader'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem'\nimport CropFreeIcon from '@material-ui/icons/CropFree'\nimport { Translation } from 'react-i18next'\nimport theme from './theme'\nimport API from './api'\nimport {\n  confirmcodeLength\n} from 'covidwatch-js/config'\n\nconst initialState = {\n  exposureStatus: false,\n  loaded: false,\n  showReportConfirmation: false,\n  confirmcode: undefined,\n  mode: 'default'\n}\n\nclass Exposures extends React.Component {\n  constructor () {\n    super()\n    this.state = initialState\n  }\n\n  componentDidMount () {\n    const urlParams = new URLSearchParams(window.location.search)\n    const confirmcode = urlParams.get('confirm')\n    if (confirmcode) {\n      if (confirmcode.length === confirmcodeLength) {\n        this.setState({ confirmcode })\n        window.history.replaceState(null, null, window.location.pathname)\n        this.reportConfirmation()\n      } else {\n        this.setState({ mode: 'scan-error' })\n        window.history.replaceState(null, null, window.location.pathname)\n      }\n    }\n  }\n\n  async reset () {\n    this.setState(initialState)\n  }\n\n  showReportPrompt () {\n    this.setState({ mode: 'report-prompt' })\n  }\n\n  exitReportPrompt () {\n    this.setState({ mode: 'default' })\n  }\n\n  scanConfirmcode () {\n    this.setState({ mode: 'scan-confirmcode' })\n  }\n\n  async handleScan (data) {\n    if (data) {\n      if (data.length === confirmcodeLength) {\n        this.setState({ confirmcode: data })\n        this.reportConfirmation()\n      } else {\n        // QR code may be a url\n        const urlSplit = data.split('?confirm=')\n        if ((urlSplit.length === 2) && (urlSplit[1].length === confirmcodeLength)) {\n          this.setState({ confirmcode: urlSplit[1] })\n          this.reportConfirmation()\n        } else {\n          this.setState({ mode: 'scan-error' })\n        }\n      }\n    }\n  }\n\n  handleScanError () {\n    this.setState({ mode: 'scan-error' })\n  }\n\n  reportConfirmation () {\n    this.setState({ showReportConfirmation: true })\n  }\n\n  async reportPositive () {\n    const { confirmcode } = this.state\n    try {\n      await API.reportPositive(confirmcode)\n      this.setState({ mode: 'report-done', showReportConfirmation: false })\n    } catch (e) {\n      console.error(e)\n      this.reset()\n      window.alert('There was an unexpected error. Please leave feedback so the developer can fix this.')\n    }\n  }\n\n  render () {\n    const { status, statusLoaded } = this.props\n    const { mode, showReportConfirmation } = this.state\n    const statusMessageLoading = (<Translation>{t => t('statusLoadingMessage')}</Translation>)\n    const statusMessageNegative = (<Translation>{t => t('statusNegativeMessage')}</Translation>)\n    const statusMessagePositive = (<Translation>{t => t('statusPositiveMessage')}</Translation>)\n    const riskLevelLoading = (<Translation>{t => t('statusLoadingMessage')}</Translation>)\n    const riskLevelNegative = (<Translation>{t => t('standardRiskLevelMessage')}</Translation>)\n    const riskLevelPositive = (<Translation>{t => t('elevatedRiskLevelMessage')}</Translation>)\n    const statusMessage = statusLoaded\n      ? (status\n        ? statusMessagePositive\n        : statusMessageNegative)\n      : statusMessageLoading\n    const riskLevel = statusLoaded\n      ? (status\n        ? riskLevelPositive\n        : riskLevelNegative)\n      : riskLevelLoading\n    const riskLevelColor = status\n      ? 'error'\n      : 'primary'\n    return (\n      <Grid\n        container\n      >\n        {\n          ((mode === 'default') && (\n            <Grid\n              container\n              direction='column'\n              justify='center'\n              alignItems='center'\n            >\n              <Typography style={{ marginTop: 25 }}>\n                <Translation>{t => t('yourRiskLevelMessage')}</Translation>: <span style={{ color: theme.palette[riskLevelColor].main }}>{riskLevel}</span>\n              </Typography>\n              <Typography style={{ marginTop: 15 }}>\n                {statusMessage}\n              </Typography>\n              <Typography style={{ marginTop: 25 }}>\n                <Translation>{t => t('aboutReportMessage')}</Translation>\n              </Typography>\n              <Button onClick={this.showReportPrompt.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n                <ReportProblemIcon />\n                <Translation>{t => t('reportButton')}</Translation>\n              </Button>\n            </Grid>\n          )) || ((mode === 'report-prompt') && (\n            <Grid\n              container\n              direction='column'\n              justify='center'\n              alignItems='center'\n            >\n              <Typography style={{ marginTop: 25 }}>\n                <Translation>{t => t('aboutConfirmationCodeMessage')}</Translation>\n              </Typography>\n              <Button onClick={this.scanConfirmcode.bind(this)} variant='contained' color='secondary' aria-label='add' style={{ marginTop: 50 }}>\n                <CropFreeIcon />\n                <Translation>{t => t('scanConfirmationCodeButton')}</Translation>\n              </Button>\n              <Button onClick={this.reportConfirmation.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 50 }}>\n                <Translation>{t => t('scanWithoutConfirmationCodeButton')}</Translation>\n              </Button>\n            </Grid>\n          )) || ((mode === 'scan-confirmcode') && (\n            <Grid\n              container\n              direction='column'\n              justify='center'\n              alignItems='center'\n            >\n              {!showReportConfirmation && (\n                <QRReader\n                  delay={300}\n                  onError={this.handleScanError.bind(this)}\n                  onScan={this.handleScan.bind(this)}\n                  style={{ width: '100%' }}\n                  facingMode='environment'\n                />\n              )}\n              <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n                <ArrowBackIcon />\n                <Translation>{t => t('backButton')}</Translation>\n              </Button>\n            </Grid>\n          )) || ((mode === 'scan-error') && (\n            <Grid\n              container\n              direction='column'\n              justify='center'\n              alignItems='center'\n            >\n              <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n                <Translation>{t => t('scanErrorMessage')}</Translation>\n              </Typography>\n              <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n                <ArrowBackIcon />\n                <Translation>{t => t('backButton')}</Translation>\n              </Button>\n            </Grid>\n          )) || ((mode === 'report-done') && (\n            <Grid\n              container\n              direction='column'\n              justify='center'\n              alignItems='center'\n            >\n              <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n                <Translation>{t => t('reportCompletedMessage')}</Translation>\n              </Typography>\n              <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n                <ArrowBackIcon />\n                <Translation>{t => t('backButton')}</Translation>\n              </Button>\n            </Grid>\n          ))\n        }\n        <Dialog\n          open={showReportConfirmation}\n          disableBackdropClick\n          aria-labelledby='alert-dialog-title'\n          aria-describedby='alert-dialog-description'\n        >\n          <DialogTitle id='alert-dialog-title'>Report positive status?</DialogTitle>\n          <DialogContent>\n            <DialogContentText id='alert-dialog-description'>\n              <Translation>{t => t('reportConfirmationMessage')}</Translation>\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.reset.bind(this)} color='secondary'>\n              <Translation>{t => t('cancelReportButton')}</Translation>\n            </Button>\n            <Button onClick={this.reportPositive.bind(this)} color='primary' autoFocus>\n              <Translation>{t => t('confirmReportButton')}</Translation>\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Grid>\n    )\n  }\n}\n\nexport default Exposures\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined'\nimport CheckBoxIcon from '@material-ui/icons/CheckBox'\nimport { Translation } from 'react-i18next'\nimport API from './api'\n\nconst initialState = {\n  useConfirmed: false\n}\n\nclass Settings extends React.Component {\n  constructor () {\n    super()\n    this.state = initialState\n  }\n\n  componentDidMount () {\n    API.getUseConfirmed().then(useConfirmed => {\n      this.setState({ useConfirmed })\n    })\n  }\n\n  async toggleUseConfirmed () {\n    const { useConfirmed } = this.state\n    this.setState({ useConfirmed: !useConfirmed })\n    API.setUseConfirmed(!useConfirmed)\n  }\n\n  render () {\n    const { useConfirmed } = this.state\n    return (\n      <Grid\n        container\n        direction='column'\n        justify='center'\n        alignItems='center'\n      >\n        <Typography style={{ marginTop: 25 }}>\n          <Translation>{t => t('aboutUseConfirmedDiagnoses')}</Translation>\n        </Typography>\n        <List component='nav' style={{ marginTop: 15, width: '100%' }} aria-label='settings'>\n          <ListItem button onClick={this.toggleUseConfirmed.bind(this)}>\n            <ListItemIcon>\n              {\n                useConfirmed\n                  ? (\n                    <CheckBoxIcon />\n                  ) : (\n                    <CheckBoxOutlineBlankOutlinedIcon />\n                  )\n              }\n            </ListItemIcon>\n            <ListItemText primary={<Translation>{t => t('useConfirmedDiagnosesButton')}</Translation>} />\n          </ListItem>\n        </List>\n      </Grid>\n    )\n  }\n}\n\nexport default Settings\n","import React from 'react'\nimport Alert from '@material-ui/lab/Alert'\nimport { Translation } from 'react-i18next'\n\nclass StatusAlert extends React.Component {\n  render () {\n    const { status, onExposuresTab } = this.props\n    const extraText = onExposuresTab ? '' : (<Translation>{t => ' ' + t('seeStatusTabMessage')}</Translation>)\n    if (status) {\n      return (\n        <Alert style={{ marginTop: 25, width: '100%' }} severity='error'><Translation>{t => t('elevatedRiskAlertMessage')}</Translation>{extraText}</Alert>\n      )\n    } else {\n      return <div />\n    }\n  }\n}\n\nexport default StatusAlert\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport en from './translations/en'\nimport es from './translations/es'\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n  en,\n  es\n}\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    fallbackLng: 'fr',\n    keySeparator: false, // we do not use keys in form messages.welcome\n    interpolation: {\n      escapeValue: false // react already safes from xss\n    },\n    detection: {\n      order: ['querystring', 'cookie', 'localStorage', 'navigator', 'htmlTag', 'path', 'subdomain'],\n\n      // keys or params to lookup language from\n      lookupQuerystring: 'lng',\n      lookupCookie: 'i18next',\n      lookupLocalStorage: 'i18nextLng',\n      lookupFromPathIndex: 0,\n      lookupFromSubdomainIndex: 0,\n\n      // cache user language on\n      caches: ['localStorage', 'cookie'],\n      excludeCacheFor: ['cimode'], // languages to not persist (cookie, localStorage)\n\n      // optional expire and domain for set cookie\n      cookieMinutes: 10,\n      cookieDomain: 'myDomain',\n\n      // optional htmlTag with lang attribute, the default is:\n      htmlTag: document.documentElement,\n\n      // only detect languages that are in the whitelist\n      checkWhitelist: true\n    }\n  })\n\nexport default i18n\n","import React, { Suspense } from 'react'\nimport Container from '@material-ui/core/Container'\nimport IconButton from '@material-ui/core/IconButton'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport BottomNavigation from '@material-ui/core/BottomNavigation'\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction'\nimport CropFree from '@material-ui/icons/CropFree'\nimport Face from '@material-ui/icons/Face'\nimport Settings from '@material-ui/icons/Settings'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport InfoIcon from '@material-ui/icons/Info'\nimport AppBar from '@material-ui/core/AppBar'\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport CheckpointsPage from './Checkpoints'\nimport ExposuresPage from './Exposures'\nimport SettingsPage from './Settings'\nimport StatusAlert from './StatusAlert'\nimport logo from './logo.svg'\nimport API from './api'\nimport { Translation } from 'react-i18next'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport i18n from './i18n'\nimport supportedLanguages from './languages'\n\nconst oneSecond = 1000\nconst pollingTime = 30 * oneSecond\n\nfunction ListItemLink (props) {\n  return <ListItem button component='a' {...props} />\n}\n\nclass App extends React.Component {\n  constructor () {\n    super()\n    this.state = {\n      currentTab: 'checkpoints',\n      status: false,\n      statusLoaded: false,\n      isDrawerOpen: false,\n      currentLanguage: i18n.language\n    }\n  }\n\n  componentDidMount () {\n    this.checkConfirmcode()\n    const updateStatus = async () => {\n      try {\n        const exposureStatus = await API.getExposureStatus()\n        this.setState({ status: exposureStatus, statusLoaded: true })\n      } catch (e) {\n        console.error(e)\n        this.setState({ status: false, statusLoaded: false })\n      }\n    }\n    updateStatus()\n    setInterval(updateStatus, pollingTime)\n  }\n\n  checkConfirmcode () {\n    const urlParams = new URLSearchParams(window.location.search)\n    const confirmcode = urlParams.get('confirm')\n    if (confirmcode) {\n      this.setState({ currentTab: 'status' })\n    }\n  }\n\n  onChangeTab (event, newVal) {\n    this.setState({ currentTab: newVal })\n  }\n\n  openDrawer () {\n    this.setState({ isDrawerOpen: true })\n  }\n\n  closeDrawer () {\n    this.setState({ isDrawerOpen: false })\n  }\n\n  onSelectLanguage (event) {\n    i18n.changeLanguage(event.target.value)\n    this.setState({ currentLanguage: event.target.value })\n  }\n\n  render () {\n    const { currentTab, status, statusLoaded, isDrawerOpen, currentLanguage } = this.state\n    const CurrentPage = (currentTab === 'checkpoints')\n      ? CheckpointsPage\n      : (currentTab === 'status')\n        ? ExposuresPage\n        : SettingsPage\n    return (\n      <div>\n        <AppBar position='static' color='secondary'>\n          <Container maxWidth='sm' style={{ flexGrow: 1 }}>\n            <Toolbar>\n              <IconButton\n                edge='start'\n                color='inherit'\n                aria-label='open drawer'\n                onClick={this.openDrawer.bind(this)}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography variant='h6' component='h1' style={{ flexGrow: 1 }}>\n                TrackCOVID (beta)\n              </Typography>\n            </Toolbar>\n          </Container>\n        </AppBar>\n        <Container maxWidth='sm' style={{ marginBottom: 76 }}>\n          <Suspense fallback='loading'>\n            <StatusAlert status={status} onExposuresTab={currentTab === 'status'} />\n            <CurrentPage status={status} statusLoaded={statusLoaded} />\n            <Container style={{ padding: 10, backgroundColor: '#343434', width: '100%', marginTop: 50, textAlign: 'center', verticalAlign: 'middle', fontSize: 16, color: 'rgba(255, 255, 255, 0.7)', lineHeight: '24px' }}>\n              <img src={logo} alt='Logo' width={24} height={24} style={{ verticalAlign: 'middle', marginRight: 8, filter: 'grayscale(100%)', opacity: 0.75 }} />\n              <span style={{ verticalAlign: 'middle', lineHeight: '24px' }}>Track</span><span style={{ verticalAlign: 'middle', lineHeight: '24px' }}>COVID</span>\n            </Container>\n            <Container style={{ textAlign: 'center' }}>\n              <div>\n                <FormControl style={{ marginTop: '20px' }}>\n                  <Select\n                    labelId='language-select-label'\n                    id='language-select'\n                    value={currentLanguage}\n                    onChange={this.onSelectLanguage.bind(this)}\n                  >\n                    { supportedLanguages.map(language => {\n                      return (\n                        <MenuItem value={language.id}>{language.name}</MenuItem>\n                      )\n                    }) }\n                  </Select>\n                </FormControl>\n              </div>\n            </Container>\n          </Suspense>\n        </Container>\n        <BottomNavigation\n          value={currentTab}\n          style={{\n            width: '100%',\n            position: 'fixed',\n            bottom: 0\n          }}\n          onChange={this.onChangeTab.bind(this)}\n          showLabels\n        >\n          <BottomNavigationAction label={<Translation>{t => t('checkpointsTab')}</Translation>} value='checkpoints' icon={<CropFree />} />\n          <BottomNavigationAction label=<Translation>{t => t('statusTab')}</Translation> value='status' icon={<Face />} />\n          <BottomNavigationAction label=<Translation>{t => t('settingsTab')}</Translation> value='settings' icon={<Settings />} />\n        </BottomNavigation>\n        <SwipeableDrawer\n          open={isDrawerOpen}\n          onClose={this.closeDrawer.bind(this)}\n        >\n          <List component='nav' aria-label='settings'>\n            <ListItemLink style={{ width: 250 }} href='/' target='_blank'>\n              <ListItemIcon>\n                <InfoIcon />\n              </ListItemIcon>\n              <ListItemText primary=<Translation>{t => t('aboutButton')}</Translation> />\n            </ListItemLink>\n          </List>\n        </SwipeableDrawer>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport App from './App'\nimport theme from './theme'\nimport './i18n'\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root')\n)\n","const oneDay = 1000 * 60 * 60 * 24\nconst safetyPeriod = 14 * oneDay\nconst estimatedDiagnosisDelay = 2 * oneDay\nconst serverBaseUrl = '/api/checkpoints'\nconst checkpointKeyLength = 16\nconst confirmcodeLength = 20\n\nmodule.exports = {\n  safetyPeriod,\n  estimatedDiagnosisDelay,\n  serverBaseUrl,\n  checkpointKeyLength,\n  confirmcodeLength\n}\n","/* globals fetch */\n\nfunction CovidWatch (config) {\n  const {\n    serverBaseUrl,\n    safetyPeriod,\n    estimatedDiagnosisDelay,\n    getCheckpoints,\n    setCheckpoints,\n    getUseConfirmed,\n    setUseConfirmed\n  } = config\n\n  async function serverRequest (method, url = '', body) {\n    const response = await fetch(`${serverBaseUrl}/${url}`, {\n      method,\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: body ? JSON.stringify(body) : undefined\n    })\n    const responseJSON = response.json()\n    if (responseJSON.error) {\n      throw new Error(`request-failed: ${serverBaseUrl}/${url}`)\n    }\n    return responseJSON\n  }\n\n  async function addCheckpoint (checkpointKey) {\n    const checkpoints = await getCheckpoints()\n    if (checkpoints.length > 0) {\n      const lastCheckpoint = checkpoints[checkpoints.length - 1]\n      await serverRequest('POST', `links/${checkpointKey}/${lastCheckpoint.key}`)\n    }\n    const checkpointObj = {\n      key: checkpointKey,\n      time: Date.now()\n    }\n    checkpoints.push(checkpointObj)\n    await setCheckpoints(checkpoints)\n    return checkpointObj\n  }\n\n  async function getCheckpointStatus (checkpointKey) {\n    const response = (await serverRequest('GET', `${checkpointKey}`))\n    const useConfirmed = await getUseConfirmed()\n    const riskLevelProp = useConfirmed ? 'confirmedRiskLevel' : 'riskLevel'\n    return !response.error && (response[riskLevelProp] === 'elevated')\n  }\n\n  async function hostCheckpoint () {\n    const newCheckpointKey = (await serverRequest('POST')).checkpoint\n    return addCheckpoint(newCheckpointKey)\n  }\n\n  function joinCheckpoint (checkpointKey) {\n    return addCheckpoint(checkpointKey)\n  }\n\n  async function getExposureStatus () {\n    const checkpoints = await getCheckpoints()\n    const recentCheckpoints = checkpoints.filter(checkpoint => {\n      return Date.now() - checkpoint.time <= safetyPeriod\n    })\n    const statuses = await Promise.all(recentCheckpoints.map(checkpoint => {\n      return getCheckpointStatus(checkpoint.key)\n    }))\n    return statuses.some(status => status)\n  }\n\n  async function reportPositive (confirmcode) {\n    const checkpoints = await getCheckpoints()\n    const recentCheckpoints = checkpoints.filter(checkpoint => {\n      return Date.now() - checkpoint.time <= estimatedDiagnosisDelay\n    })\n    const checkpointKeys = recentCheckpoints.map(({ key }) => key)\n    await serverRequest('POST', 'exposures', {\n      keys: checkpointKeys,\n      confirmcode\n    })\n  }\n\n  return {\n    hostCheckpoint,\n    joinCheckpoint,\n    getExposureStatus,\n    reportPositive,\n    getUseConfirmed,\n    setUseConfirmed\n  }\n}\n\nmodule.exports = CovidWatch\n","module.exports = __webpack_public_path__ + \"static/media/logo.71bb516e.svg\";"],"sourceRoot":""}