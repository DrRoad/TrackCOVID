{"version":3,"sources":["api.js","Checkpoints.js","theme.js","Exposures.js","Settings.js","StatusAlert.js","App.js","index.js","../../covidwatch-js/config.js","../../covidwatch-js/index.js","logo.svg"],"names":["serverBaseUrl","defaultServerBaseUrl","getUseConfirmed","a","localStorage","window","useConfirmedString","getItem","Promise","resolve","JSON","parse","setUseConfirmed","newVal","setItem","stringify","covidWatch","CovidWatch","safetyPeriod","estimatedDiagnosisDelay","getCheckpoints","checkpointsString","setCheckpoints","checkpointsArr","hostCheckpoint","joinCheckpoint","getExposureStatus","reportPositive","initialState","mode","checkpointKey","checkpointTime","legacyMode","Checkpoints","state","URLSearchParams","location","search","get","length","checkpointKeyLength","API","then","checkpointObj","setState","history","replaceState","pathname","e","console","error","this","key","time","alert","reset","data","urlSplit","split","refs","checkpointQR","openImageDialog","content","qrValue","href","Grid","container","direction","justify","alignItems","Typography","style","marginTop","marginBottom","Button","onClick","becomeHost","bind","variant","color","aria-label","value","size","backgroundColor","padding","endHost","Date","toString","ref","delay","onError","handleScanError","onScan","handleScan","width","facingMode","React","Component","theme","createMuiTheme","palette","type","primary","main","secondary","exposureStatus","loaded","showReportConfirmation","confirmcode","undefined","Exposures","confirmcodeLength","reportConfirmation","props","status","statusLoaded","statusMessage","riskLevel","riskLevelColor","showReportPrompt","scanConfirmcode","Dialog","open","disableBackdropClick","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","useConfirmed","Settings","List","component","ListItem","button","toggleUseConfirmed","ListItemIcon","ListItemText","StatusAlert","extraText","onExposuresTab","Alert","severity","ListItemLink","App","currentTab","isDrawerOpen","checkConfirmcode","updateStatus","setInterval","event","CurrentPage","CheckpointsPage","ExposuresPage","SettingsPage","AppBar","position","Container","maxWidth","flexGrow","Toolbar","IconButton","edge","openDrawer","textAlign","verticalAlign","fontSize","lineHeight","src","logo","alt","height","marginRight","filter","opacity","BottomNavigation","bottom","onChange","onChangeTab","showLabels","BottomNavigationAction","label","icon","SwipeableDrawer","onClose","closeDrawer","target","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector","module","exports","config","serverRequest","method","url","body","fetch","headers","Accept","response","responseJSON","json","Error","addCheckpoint","checkpoints","lastCheckpoint","now","push","getCheckpointStatus","riskLevelProp","newCheckpointKey","checkpoint","recentCheckpoints","all","map","statuses","some","checkpointKeys","keys"],"mappings":"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","file":"static/js/main.28eb23cc.chunk.js","sourcesContent":["import CovidWatch from 'covidwatch-js'\nimport {\n  safetyPeriod,\n  estimatedDiagnosisDelay,\n  serverBaseUrl as defaultServerBaseUrl\n} from 'covidwatch-js/config'\n\nconst checkpointsDBKey = 'CHECKPOINTS'\nconst useConfirmedDBKey = 'USECONFIRMED'\nconst serverBaseUrl = (process.env['REACT_APP_ENV'] === 'development')\n  ? 'http://localhost:8000/api/checkpoints'\n  : defaultServerBaseUrl\n\nfunction getCheckpoints () {\n  const localStorage = window.localStorage\n  const checkpointsString = localStorage.getItem(checkpointsDBKey) || '[]'\n  return Promise.resolve(JSON.parse(checkpointsString))\n}\n\nfunction setCheckpoints (checkpointsArr) {\n  const localStorage = window.localStorage\n  return Promise.resolve(localStorage.setItem(checkpointsDBKey, JSON.stringify(checkpointsArr)))\n}\n\nasync function getUseConfirmed () {\n  const localStorage = window.localStorage\n  const useConfirmedString = localStorage.getItem(useConfirmedDBKey) || 'false'\n  return Promise.resolve(JSON.parse(useConfirmedString))\n}\n\nasync function setUseConfirmed (newVal) {\n  const localStorage = window.localStorage\n  return Promise.resolve(localStorage.setItem(useConfirmedDBKey, JSON.stringify(newVal)))\n}\n\nconst covidWatch = CovidWatch({\n  serverBaseUrl,\n  safetyPeriod,\n  estimatedDiagnosisDelay,\n  getCheckpoints,\n  setCheckpoints,\n  getUseConfirmed,\n  setUseConfirmed\n})\n\nconst {\n  hostCheckpoint,\n  joinCheckpoint,\n  getExposureStatus,\n  reportPositive\n} = covidWatch\n\nexport default {\n  hostCheckpoint,\n  joinCheckpoint,\n  getExposureStatus,\n  reportPositive,\n  getUseConfirmed,\n  setUseConfirmed\n}\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport AddIcon from '@material-ui/icons/Add'\nimport HomeIcon from '@material-ui/icons/Home'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport StopIcon from '@material-ui/icons/Stop'\nimport QRCode from 'qrcode.react'\nimport QRReader from 'react-qr-reader'\nimport API from './api'\nimport {\n  checkpointKeyLength\n} from 'covidwatch-js/config'\n\nconst initialState = {\n  mode: 'home',\n  checkpointKey: null,\n  checkpointTime: null,\n  legacyMode: false\n}\n\nclass Checkpoints extends React.Component {\n  constructor () {\n    super()\n    this.state = initialState\n  }\n\n  componentDidMount () {\n    const urlParams = new URLSearchParams(window.location.search)\n    const checkpointKey = urlParams.get('checkpoint')\n    if (checkpointKey) {\n      if (checkpointKey.length === checkpointKeyLength) {\n        try {\n          API.joinCheckpoint(checkpointKey).then(checkpointObj => {\n            this.setState({ mode: 'scan-success' })\n            window.history.replaceState(null, null, window.location.pathname)\n          })\n        } catch (e) {\n          console.error(e)\n          this.setState({ mode: 'scan-error' })\n          window.history.replaceState(null, null, window.location.pathname)\n        }\n      } else {\n        this.setState({ mode: 'scan-error' })\n        window.history.replaceState(null, null, window.location.pathname)\n      }\n    }\n  }\n\n  async reset () {\n    this.setState(initialState)\n  }\n\n  async becomeHost () {\n    try {\n      const { key, time } = await API.hostCheckpoint()\n      this.setState({\n        mode: 'host',\n        checkpointKey: key,\n        checkpointTime: time\n      })\n    } catch (e) {\n      console.error(e)\n      window.alert('There was an unexpected error. Please leave feedback so the developer can fix this.')\n    }\n  }\n\n  async endHost () {\n    // TODO confirmation\n    this.reset()\n  }\n\n  async joinCheckpoint () {\n    this.setState({\n      mode: 'join'\n    })\n  }\n\n  async handleScan (data) {\n    if (data) {\n      if (data.length === checkpointKeyLength) {\n        try {\n          await API.joinCheckpoint(data)\n          this.setState({ mode: 'scan-success' })\n        } catch (e) {\n          console.error(e)\n          this.setState({ mode: 'scan-error' })\n        }\n      } else {\n        // QR code may be a url\n        const urlSplit = data.split('?checkpoint=')\n        if ((urlSplit.length === 2) && (urlSplit[1].length === checkpointKeyLength)) {\n          await API.joinCheckpoint(urlSplit[1])\n          this.setState({ mode: 'scan-success' })\n        } else {\n          this.setState({ mode: 'scan-error' })\n        }\n      }\n    }\n  }\n\n  handleScanError () {\n    this.setState({ legacyMode: true })\n  }\n\n  openImageDialog () {\n    this.refs.checkpointQR.openImageDialog()\n  }\n\n  render () {\n    const { mode, checkpointKey, checkpointTime, legacyMode } = this.state\n    const qrValue = `${window.location.href}?checkpoint=${checkpointKey}`\n    let content\n    if (mode === 'home') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n            Welcome to TrackCOVID. To participate in the effort to track the spread of the SARS-COV-2 virus, please host or join a checkpoint whenever you interact with others in a way that could transmit the virus.\n          </Typography>\n          <Button onClick={this.becomeHost.bind(this)} variant='contained' color='secondary' aria-label='add' style={{ marginTop: 50 }}>\n            <HomeIcon />\n            Host a Checkpoint\n          </Button>\n          <Button onClick={this.joinCheckpoint.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 50 }}>\n            <AddIcon />\n            Join a Checkpoint\n          </Button>\n        </Grid>\n      )\n    } else if (mode === 'host') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n            You are now hosting a checkpoint. Others may join using the QR code below.\n          </Typography>\n          <QRCode value={qrValue} size={200} style={{ backgroundColor: '#fff', padding: 20 }} />\n          <Button onClick={this.endHost.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <StopIcon />\n            End checkpoint\n          </Button>\n          <Typography style={{ marginTop: 25 }}>\n            Checkpoint created {new Date(checkpointTime).toString()}\n          </Typography>\n        </Grid>\n      )\n    } else if (mode === 'join') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <QRReader\n            ref='checkpointQR'\n            delay={300}\n            onError={this.handleScanError.bind(this)}\n            onScan={this.handleScan.bind(this)}\n            style={{ width: legacyMode ? 0 : '100%' }}\n            facingMode='environment'\n            legacyMode={legacyMode}\n          />\n          { legacyMode && (\n            <Typography style={{ marginTop: 25 }}>\n              This app does not have permission to access your device's camera. Instead, you may take a picture of the QR code.\n            </Typography>\n          ) }\n          <Button onClick={this.openImageDialog.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            Take a picture\n          </Button>\n          <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <ArrowBackIcon />\n            Back\n          </Button>\n        </Grid>\n      )\n    } else if (mode === 'scan-success') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n            You have joined the checkpoint successfully.\n          </Typography>\n          <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <ArrowBackIcon />\n            Back\n          </Button>\n        </Grid>\n      )\n    } else if (mode === 'scan-error') {\n      content = (\n        <Grid\n          container\n          direction='column'\n          justify='center'\n          alignItems='center'\n        >\n          <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n            The QR code could not be read. Please try again.\n          </Typography>\n          <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n            <ArrowBackIcon />\n            Back\n          </Button>\n        </Grid>\n      )\n    }\n    return content\n  }\n}\n\nexport default Checkpoints\n","import { createMuiTheme } from '@material-ui/core/styles'\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#ffef62'\n    },\n    secondary: {\n      main: '#fbc02d'\n    }\n  }\n})\n\nexport default theme\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport QRReader from 'react-qr-reader'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem'\nimport CropFreeIcon from '@material-ui/icons/CropFree'\nimport theme from './theme'\nimport API from './api'\nimport {\n  confirmcodeLength\n} from 'covidwatch-js/config'\n\nconst initialState = {\n  exposureStatus: false,\n  loaded: false,\n  showReportConfirmation: false,\n  confirmcode: undefined,\n  mode: 'default'\n}\n\nclass Exposures extends React.Component {\n  constructor () {\n    super()\n    this.state = initialState\n  }\n\n  componentDidMount () {\n    const urlParams = new URLSearchParams(window.location.search)\n    const confirmcode = urlParams.get('confirm')\n    if (confirmcode) {\n      if (confirmcode.length === confirmcodeLength) {\n        this.setState({ confirmcode })\n        window.history.replaceState(null, null, window.location.pathname)\n        this.reportConfirmation()\n      } else {\n        this.setState({ mode: 'scan-error' })\n        window.history.replaceState(null, null, window.location.pathname)\n      }\n    }\n  }\n\n  async reset () {\n    this.setState(initialState)\n  }\n\n  showReportPrompt () {\n    this.setState({ mode: 'report-prompt' })\n  }\n\n  exitReportPrompt () {\n    this.setState({ mode: 'default' })\n  }\n\n  scanConfirmcode () {\n    this.setState({ mode: 'scan-confirmcode' })\n  }\n\n  async handleScan (data) {\n    if (data) {\n      if (data.length === confirmcodeLength) {\n        this.setState({ confirmcode: data })\n        this.reportConfirmation()\n      } else {\n        // QR code may be a url\n        const urlSplit = data.split('?confirm=')\n        if ((urlSplit.length === 2) && (urlSplit[1].length === confirmcodeLength)) {\n          this.setState({ confirmcode: urlSplit[1] })\n          this.reportConfirmation()\n        } else {\n          this.setState({ mode: 'scan-error' })\n        }\n      }\n    }\n  }\n\n  handleScanError () {\n    this.setState({ mode: 'scan-error' })\n  }\n\n  reportConfirmation () {\n    this.setState({ showReportConfirmation: true })\n  }\n\n  async reportPositive () {\n    const { confirmcode } = this.state\n    try {\n      await API.reportPositive(confirmcode)\n      this.setState({ mode: 'report-done', showReportConfirmation: false })\n    } catch (e) {\n      console.error(e)\n      this.reset()\n      window.alert('There was an unexpected error. Please leave feedback so the developer can fix this.')\n    }\n  }\n\n  render () {\n    const { status, statusLoaded } = this.props\n    const { mode, showReportConfirmation } = this.state\n    const statusMessageLoading = 'Loading your status...'\n    const statusMessageNegative = 'No transmission paths from infected individuals to you have been discovered at this time. However, everyone is at risk and individuals should follow the directives of the CDC as well as local, state, and federal governments.'\n    const statusMessagePositive = 'A possible transmission path from an infected individual to you has been discovered. You should take precautionary measures to protect yourself and others, according to the directives of the CDC  as well as local, state, and federal governments.'\n    const riskLevelLoading = 'Loading...'\n    const riskLevelNegative = 'standard'\n    const riskLevelPositive = 'elevated'\n    const statusMessage = statusLoaded\n      ? (status\n        ? statusMessagePositive\n        : statusMessageNegative)\n      : statusMessageLoading\n    const riskLevel = statusLoaded\n      ? (status\n        ? riskLevelPositive\n        : riskLevelNegative)\n      : riskLevelLoading\n    const riskLevelColor = status\n      ? 'error'\n      : 'primary'\n    return (\n      <Grid\n        container\n      >\n        {\n          ((mode === 'default') && (\n            <Grid\n              container\n              direction='column'\n              justify='center'\n              alignItems='center'\n            >\n              <Typography style={{ marginTop: 25 }}>\n                Your risk level: <span style={{ color: theme.palette[riskLevelColor].main }}>{riskLevel}</span>\n              </Typography>\n              <Typography style={{ marginTop: 15 }}>\n                {statusMessage}\n              </Typography>\n              <Typography style={{ marginTop: 25 }}>\n                If you or someone you have been in close contact with have received a positive test, you may report it using the button below. This will warn those who may have been exposed of their increased risk. You will remain anonymous.\n              </Typography>\n              <Button onClick={this.showReportPrompt.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n                <ReportProblemIcon />\n                Anonymous Report\n              </Button>\n            </Grid>\n          )) || ((mode === 'report-prompt') && (\n            <Grid\n              container\n              direction='column'\n              justify='center'\n              alignItems='center'\n            >\n              <Typography style={{ marginTop: 25 }}>\n                Do you have a confirmation code to scan? Scanning a confirmation code will help those that may have been exposed, by letting them know that this is a legitimate risk.\n              </Typography>\n              <Button onClick={this.scanConfirmcode.bind(this)} variant='contained' color='secondary' aria-label='add' style={{ marginTop: 50 }}>\n                <CropFreeIcon />\n                Scan confirmation code\n              </Button>\n              <Button onClick={this.reportConfirmation.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 50 }}>\n                I don't have a code\n              </Button>\n            </Grid>\n          )) || ((mode === 'scan-confirmcode') && (\n            <Grid\n              container\n              direction='column'\n              justify='center'\n              alignItems='center'\n            >\n              {!showReportConfirmation && (\n                <QRReader\n                  delay={300}\n                  onError={this.handleScanError.bind(this)}\n                  onScan={this.handleScan.bind(this)}\n                  style={{ width: '100%' }}\n                  facingMode='environment'\n                />\n              )}\n              <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n                <ArrowBackIcon />\n                Back\n              </Button>\n            </Grid>\n          )) || ((mode === 'scan-error') && (\n            <Grid\n              container\n              direction='column'\n              justify='center'\n              alignItems='center'\n            >\n              <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n                The QR code could not be read. Please try again.\n              </Typography>\n              <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n                <ArrowBackIcon />\n                Back\n              </Button>\n            </Grid>\n          )) || ((mode === 'report-done') && (\n            <Grid\n              container\n              direction='column'\n              justify='center'\n              alignItems='center'\n            >\n              <Typography style={{ marginTop: 25, marginBottom: 25 }}>\n                Your positive status was reported anonymously. Those at risk will be notified. Thank you.\n              </Typography>\n              <Button onClick={this.reset.bind(this)} variant='contained' color='primary' aria-label='add' style={{ marginTop: 25 }}>\n                <ArrowBackIcon />\n                Back\n              </Button>\n            </Grid>\n          ))\n        }\n        <Dialog\n          open={showReportConfirmation}\n          disableBackdropClick\n          aria-labelledby='alert-dialog-title'\n          aria-describedby='alert-dialog-description'\n        >\n          <DialogTitle id='alert-dialog-title'>Report positive status?</DialogTitle>\n          <DialogContent>\n            <DialogContentText id='alert-dialog-description'>\n              This will notify those that may have been exposed of their increased risk. You will remain anonymous. This cannot be undone.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.reset.bind(this)} color='secondary'>\n              Never mind\n            </Button>\n            <Button onClick={this.reportPositive.bind(this)} color='primary' autoFocus>\n              Report now\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Grid>\n    )\n  }\n}\n\nexport default Exposures\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport CheckBoxOutlineBlankOutlinedIcon from '@material-ui/icons/CheckBoxOutlineBlankOutlined'\nimport CheckBoxIcon from '@material-ui/icons/CheckBox'\nimport API from './api'\n\nconst initialState = {\n  useConfirmed: false\n}\n\nclass Settings extends React.Component {\n  constructor () {\n    super()\n    this.state = initialState\n  }\n\n  componentDidMount () {\n    API.getUseConfirmed().then(useConfirmed => {\n      this.setState({ useConfirmed })\n    })\n  }\n\n  async toggleUseConfirmed () {\n    const { useConfirmed } = this.state\n    this.setState({ useConfirmed: !useConfirmed })\n    API.setUseConfirmed(!useConfirmed)\n  }\n\n  render () {\n    const { useConfirmed } = this.state\n    return (\n      <Grid\n        container\n        direction='column'\n        justify='center'\n        alignItems='center'\n      >\n        <Typography style={{ marginTop: 25 }}>\n          Selecting \"Use only confirmed diagnoses\" will ignore possible transmission paths from unconfirmed reports.\n        </Typography>\n        <List component='nav' style={{ marginTop: 15, width: '100%' }} aria-label='settings'>\n          <ListItem button onClick={this.toggleUseConfirmed.bind(this)}>\n            <ListItemIcon>\n              {\n                useConfirmed\n                  ? (\n                    <CheckBoxIcon />\n                  ) : (\n                    <CheckBoxOutlineBlankOutlinedIcon />\n                  )\n              }\n            </ListItemIcon>\n            <ListItemText primary='Use only confirmed diagnoses' />\n          </ListItem>\n        </List>\n      </Grid>\n    )\n  }\n}\n\nexport default Settings\n","import React from 'react'\nimport Alert from '@material-ui/lab/Alert'\n\nclass StatusAlert extends React.Component {\n  render () {\n    const { status, onExposuresTab } = this.props\n    const extraText = onExposuresTab ? '' : ' See the status tab.'\n    if (status) {\n      return (\n        <Alert style={{ marginTop: 25, width: '100%' }} severity='error'>Your risk level is elevated.{extraText}</Alert>\n      )\n    } else {\n      return <div />\n    }\n  }\n}\n\nexport default StatusAlert\n","import React from 'react'\nimport Container from '@material-ui/core/Container'\nimport IconButton from '@material-ui/core/IconButton'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport BottomNavigation from '@material-ui/core/BottomNavigation'\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction'\nimport CropFree from '@material-ui/icons/CropFree'\nimport Face from '@material-ui/icons/Face'\nimport Settings from '@material-ui/icons/Settings'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport InfoIcon from '@material-ui/icons/Info'\nimport AppBar from '@material-ui/core/AppBar'\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport CheckpointsPage from './Checkpoints'\nimport ExposuresPage from './Exposures'\nimport SettingsPage from './Settings'\nimport StatusAlert from './StatusAlert'\nimport logo from './logo.svg'\nimport API from './api'\n\nconst oneSecond = 1000\nconst pollingTime = 30 * oneSecond\n\nfunction ListItemLink (props) {\n  return <ListItem button component='a' {...props} />\n}\n\nclass App extends React.Component {\n  constructor () {\n    super()\n    this.state = {\n      currentTab: 'checkpoints',\n      status: false,\n      statusLoaded: false,\n      isDrawerOpen: false\n    }\n  }\n\n  componentDidMount () {\n    this.checkConfirmcode()\n    const updateStatus = async () => {\n      try {\n        const exposureStatus = await API.getExposureStatus()\n        this.setState({ status: exposureStatus, statusLoaded: true })\n      } catch (e) {\n        console.error(e)\n        this.setState({ status: false, statusLoaded: false })\n      }\n    }\n    updateStatus()\n    setInterval(updateStatus, pollingTime)\n  }\n\n  checkConfirmcode () {\n    const urlParams = new URLSearchParams(window.location.search)\n    const confirmcode = urlParams.get('confirm')\n    if (confirmcode) {\n      this.setState({ currentTab: 'status' })\n    }\n  }\n\n  onChangeTab (event, newVal) {\n    this.setState({ currentTab: newVal })\n  }\n\n  openDrawer () {\n    this.setState({ isDrawerOpen: true })\n  }\n\n  closeDrawer () {\n    this.setState({ isDrawerOpen: false })\n  }\n\n  render () {\n    const { currentTab, status, statusLoaded, isDrawerOpen } = this.state\n    const CurrentPage = (currentTab === 'checkpoints')\n      ? CheckpointsPage\n      : (currentTab === 'status')\n        ? ExposuresPage\n        : SettingsPage\n    return (\n      <div>\n        <AppBar position='static' color='secondary'>\n          <Container maxWidth='sm' style={{ flexGrow: 1 }}>\n            <Toolbar>\n              <IconButton\n                edge='start'\n                color='inherit'\n                aria-label='open drawer'\n                onClick={this.openDrawer.bind(this)}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography variant='h6' component='h1' style={{ flexGrow: 1 }}>\n                TrackCOVID (beta)\n              </Typography>\n            </Toolbar>\n          </Container>\n        </AppBar>\n        <Container maxWidth='sm' style={{ marginBottom: 76 }}>\n          <StatusAlert status={status} onExposuresTab={currentTab === 'status'} />\n          <CurrentPage status={status} statusLoaded={statusLoaded} />\n          <Container style={{ padding: 10, backgroundColor: '#343434', width: '100%', marginTop: 50, textAlign: 'center', verticalAlign: 'middle', fontSize: 16, color: 'rgba(255, 255, 255, 0.7)', lineHeight: '24px' }}>\n            <img src={logo} alt='Logo' width={24} height={24} style={{ verticalAlign: 'middle', marginRight: 8, filter: 'grayscale(100%)', opacity: 0.75 }} />\n            <span style={{ verticalAlign: 'middle', lineHeight: '24px' }}>Track</span><span style={{ verticalAlign: 'middle', lineHeight: '24px' }}>COVID</span>\n          </Container>\n        </Container>\n        <BottomNavigation\n          value={currentTab}\n          style={{\n            width: '100%',\n            position: 'fixed',\n            bottom: 0\n          }}\n          onChange={this.onChangeTab.bind(this)}\n          showLabels\n        >\n          <BottomNavigationAction label='Checkpoints' value='checkpoints' icon={<CropFree />} />\n          <BottomNavigationAction label='Status' value='status' icon={<Face />} />\n          <BottomNavigationAction label='Settings' value='settings' icon={<Settings />} />\n        </BottomNavigation>\n        <SwipeableDrawer\n          open={isDrawerOpen}\n          onClose={this.closeDrawer.bind(this)}\n        >\n          <List component='nav' aria-label='settings'>\n            <ListItemLink style={{ width: 250 }} href='/' target='_blank'>\n              <ListItemIcon>\n                <InfoIcon />\n              </ListItemIcon>\n              <ListItemText primary='About' />\n            </ListItemLink>\n          </List>\n        </SwipeableDrawer>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport App from './App'\nimport theme from './theme'\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root')\n)\n","const oneDay = 1000 * 60 * 60 * 24\nconst safetyPeriod = 14 * oneDay\nconst estimatedDiagnosisDelay = 2 * oneDay\nconst serverBaseUrl = '/api/checkpoints'\nconst checkpointKeyLength = 16\nconst confirmcodeLength = 20\n\nmodule.exports = {\n  safetyPeriod,\n  estimatedDiagnosisDelay,\n  serverBaseUrl,\n  checkpointKeyLength,\n  confirmcodeLength\n}\n","/* globals fetch */\n\nfunction CovidWatch (config) {\n  const {\n    serverBaseUrl,\n    safetyPeriod,\n    estimatedDiagnosisDelay,\n    getCheckpoints,\n    setCheckpoints,\n    getUseConfirmed,\n    setUseConfirmed\n  } = config\n\n  async function serverRequest (method, url = '', body) {\n    const response = await fetch(`${serverBaseUrl}/${url}`, {\n      method,\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: body ? JSON.stringify(body) : undefined\n    })\n    const responseJSON = response.json()\n    if (responseJSON.error) {\n      throw new Error(`request-failed: ${serverBaseUrl}/${url}`)\n    }\n    return responseJSON\n  }\n\n  async function addCheckpoint (checkpointKey) {\n    const checkpoints = await getCheckpoints()\n    if (checkpoints.length > 0) {\n      const lastCheckpoint = checkpoints[checkpoints.length - 1]\n      await serverRequest('POST', `links/${checkpointKey}/${lastCheckpoint.key}`)\n    }\n    const checkpointObj = {\n      key: checkpointKey,\n      time: Date.now()\n    }\n    checkpoints.push(checkpointObj)\n    await setCheckpoints(checkpoints)\n    return checkpointObj\n  }\n\n  async function getCheckpointStatus (checkpointKey) {\n    const response = (await serverRequest('GET', `${checkpointKey}`))\n    const useConfirmed = await getUseConfirmed()\n    const riskLevelProp = useConfirmed ? 'confirmedRiskLevel' : 'riskLevel'\n    return !response.error && (response[riskLevelProp] === 'elevated')\n  }\n\n  async function hostCheckpoint () {\n    const newCheckpointKey = (await serverRequest('POST')).checkpoint\n    return addCheckpoint(newCheckpointKey)\n  }\n\n  function joinCheckpoint (checkpointKey) {\n    return addCheckpoint(checkpointKey)\n  }\n\n  async function getExposureStatus () {\n    const checkpoints = await getCheckpoints()\n    const recentCheckpoints = checkpoints.filter(checkpoint => {\n      return Date.now() - checkpoint.time <= safetyPeriod\n    })\n    const statuses = await Promise.all(recentCheckpoints.map(checkpoint => {\n      return getCheckpointStatus(checkpoint.key)\n    }))\n    return statuses.some(status => status)\n  }\n\n  async function reportPositive (confirmcode) {\n    const checkpoints = await getCheckpoints()\n    const recentCheckpoints = checkpoints.filter(checkpoint => {\n      return Date.now() - checkpoint.time <= estimatedDiagnosisDelay\n    })\n    const checkpointKeys = recentCheckpoints.map(({ key }) => key)\n    await serverRequest('POST', 'exposures', {\n      keys: checkpointKeys,\n      confirmcode\n    })\n  }\n\n  return {\n    hostCheckpoint,\n    joinCheckpoint,\n    getExposureStatus,\n    reportPositive,\n    getUseConfirmed,\n    setUseConfirmed\n  }\n}\n\nmodule.exports = CovidWatch\n","module.exports = __webpack_public_path__ + \"static/media/logo.71bb516e.svg\";"],"sourceRoot":""}